{"ast":null,"code":"import React,{useState}from\"react\";import{PaymentElement,useStripe,useElements}from\"@stripe/react-stripe-js\";import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function CheckoutForm(_ref){let{dpmCheckerLink}=_ref;const navigate=useNavigate();const stripe=useStripe();const elements=useElements();const[message,setMessage]=useState(null);const[isLoading,setIsLoading]=useState(false);const handleSubmit=async e=>{e.preventDefault();if(!stripe||!elements){// Stripe.js hasn't yet loaded.\n// Make sure to disable form submission until Stripe.js has loaded.\nreturn;}setIsLoading(true);const{error}=await stripe.confirmPayment({elements,confirmParams:{// Make sure to change this to your payment completion page\nreturn_url:\"http://localhost:3000/complete\"}});// This point will only be reached if there is an immediate error when\n// confirming the payment. Otherwise, your customer will be redirected to\n// your `return_url`. For some payment methods like iDEAL, your customer will\n// be redirected to an intermediate site first to authorize the payment, then\n// redirected to the `return_url`.\nif(error.type===\"card_error\"||error.type===\"validation_error\"){setMessage(error.message);}else{setMessage(\"An unexpected error occurred.\");}setIsLoading(false);};const paymentElementOptions={layout:\"tabs\"};return/*#__PURE__*/_jsx(_Fragment,{children:dpmCheckerLink&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"form\",{id:\"payment-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(PaymentElement,{id:\"payment-element\",options:paymentElementOptions}),/*#__PURE__*/_jsx(\"button\",{disabled:isLoading||!stripe||!elements,id:\"submit\",children:/*#__PURE__*/_jsx(\"span\",{id:\"button-text\",children:isLoading?/*#__PURE__*/_jsx(\"div\",{className:\"spinner\",id:\"spinner\"}):\"Pay now\"})}),message&&/*#__PURE__*/_jsx(\"div\",{id:\"payment-message\",children:message})]}),/*#__PURE__*/_jsx(\"div\",{id:\"dpm-annotation\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Payment methods are dynamically displayed based on customer location, order amount, and currency.\\xA0\",/*#__PURE__*/_jsx(\"a\",{href:dpmCheckerLink,target:\"_blank\",rel:\"noopener noreferrer\",id:\"dpm-integration-checker\",children:\"Preview payment methods by transaction\"})]})})]})});}","map":{"version":3,"names":["React","useState","PaymentElement","useStripe","useElements","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CheckoutForm","_ref","dpmCheckerLink","navigate","stripe","elements","message","setMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","paymentElementOptions","layout","children","id","onSubmit","options","disabled","className","href","target","rel"],"sources":["/Users/hwarye/Documents/coding/sparta/final-project/project/stripe-front/src/CheckoutForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { useNavigate } from 'react-router-dom';\n\nexport default function CheckoutForm({dpmCheckerLink}) {\n  const navigate = useNavigate();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/complete\",\n      },\n    });\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  }\n\n  return (\n    <>\n      {dpmCheckerLink &&\n          <>\n\n            <form id=\"payment-form\" onSubmit={handleSubmit}>\n              <PaymentElement id=\"payment-element\" options={paymentElementOptions}/>\n              <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n          <span id=\"button-text\">\n            {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n          </span>\n              </button>\n              {/* Show any error or success messages */}\n              {message && <div id=\"payment-message\">{message}</div>}\n            </form>\n            {/* [DEV]: Display dynamic payment methods annotation and integration checker */}\n            <div id=\"dpm-annotation\">\n              <p>\n                Payment methods are dynamically displayed based on customer location, order amount, and currency.&nbsp;\n                <a href={dpmCheckerLink} target=\"_blank\" rel=\"noopener noreferrer\" id=\"dpm-integration-checker\">Preview\n                  payment methods by transaction</a>\n              </p>\n            </div>\n          </>\n      }\n    </>\n  );\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OACEC,cAAc,CACdC,SAAS,CACTC,WAAW,KACN,yBAAyB,CAChC,OAASC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE/C,cAAe,SAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAmB,IAAlB,CAACC,cAAc,CAAC,CAAAD,IAAA,CACnD,KAAM,CAAAE,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAW,MAAM,CAAGb,SAAS,CAAC,CAAC,CAC1B,KAAM,CAAAc,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACmB,SAAS,CAAEC,YAAY,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAAqB,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAI,CAACR,MAAM,EAAI,CAACC,QAAQ,CAAE,CACxB;AACA;AACA,OACF,CAEAI,YAAY,CAAC,IAAI,CAAC,CAElB,KAAM,CAAEI,KAAM,CAAC,CAAG,KAAM,CAAAT,MAAM,CAACU,cAAc,CAAC,CAC5CT,QAAQ,CACRU,aAAa,CAAE,CACb;AACAC,UAAU,CAAE,gCACd,CACF,CAAC,CAAC,CACF;AACA;AACA;AACA;AACA;AACA,GAAIH,KAAK,CAACI,IAAI,GAAK,YAAY,EAAIJ,KAAK,CAACI,IAAI,GAAK,kBAAkB,CAAE,CACpEV,UAAU,CAACM,KAAK,CAACP,OAAO,CAAC,CAC3B,CAAC,IAAM,CACLC,UAAU,CAAC,+BAA+B,CAAC,CAC7C,CAEAE,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAED,KAAM,CAAAS,qBAAqB,CAAG,CAC5BC,MAAM,CAAE,MACV,CAAC,CAED,mBACExB,IAAA,CAAAI,SAAA,EAAAqB,QAAA,CACGlB,cAAc,eACXL,KAAA,CAAAE,SAAA,EAAAqB,QAAA,eAEEvB,KAAA,SAAMwB,EAAE,CAAC,cAAc,CAACC,QAAQ,CAAEZ,YAAa,CAAAU,QAAA,eAC7CzB,IAAA,CAACL,cAAc,EAAC+B,EAAE,CAAC,iBAAiB,CAACE,OAAO,CAAEL,qBAAsB,CAAC,CAAC,cACtEvB,IAAA,WAAQ6B,QAAQ,CAAEhB,SAAS,EAAI,CAACJ,MAAM,EAAI,CAACC,QAAS,CAACgB,EAAE,CAAC,QAAQ,CAAAD,QAAA,cACpEzB,IAAA,SAAM0B,EAAE,CAAC,aAAa,CAAAD,QAAA,CACnBZ,SAAS,cAAGb,IAAA,QAAK8B,SAAS,CAAC,SAAS,CAACJ,EAAE,CAAC,SAAS,CAAM,CAAC,CAAG,SAAS,CACjE,CAAC,CACK,CAAC,CAERf,OAAO,eAAIX,IAAA,QAAK0B,EAAE,CAAC,iBAAiB,CAAAD,QAAA,CAAEd,OAAO,CAAM,CAAC,EACjD,CAAC,cAEPX,IAAA,QAAK0B,EAAE,CAAC,gBAAgB,CAAAD,QAAA,cACtBvB,KAAA,MAAAuB,QAAA,EAAG,uGAED,cAAAzB,IAAA,MAAG+B,IAAI,CAAExB,cAAe,CAACyB,MAAM,CAAC,QAAQ,CAACC,GAAG,CAAC,qBAAqB,CAACP,EAAE,CAAC,yBAAyB,CAAAD,QAAA,CAAC,wCAChE,CAAG,CAAC,EACnC,CAAC,CACD,CAAC,EACN,CAAC,CAEP,CAAC,CAEP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}